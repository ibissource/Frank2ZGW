---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "zaakbrug.fullname" . }}-env
  labels:
    {{- include "zaakbrug.labels" . | nindent 4 }}
data:
  # Enable Narayana transaction manager
  application.server.type.custom: NARAYANA
  JAVA_OPTS: -Xmx{{ .Values.frank.memory }} -Xms{{ .Values.frank.memory }}
  TZ: {{ .Values.timeZone }}
  zaakbrug.zds.timezone: {{ .Values.zaakbrug.zds.timezone | default "UTC" }}
  {{- $name := .Values.frank.instance.name | required (printf ".frank.instance.name is a required parameter") }}
  instance.name: {{ .Values.frank.instance.name }}
  {{- $name := .Values.frank.dtap.stage | required (printf ".frank.dtap.stage is a required parameter") }}
  dtap.stage: {{ .Values.frank.dtap.stage }}
  dtap.side: {{ .Values.frank.dtap.side | default "cluster" }}
  {{- with .Values.frank.configurations.names }}
  configurations.names: {{ . }}
  {{- end }}
  application.security.http.authentication: "{{ .Values.frank.security.http.authentication }}"
  application.security.http.transportGuarantee: {{ .Values.frank.security.http.enforceHttps | ternary "CONFIDENTIAL" "NONE" }}
  {{- if .Values.frank.security.http.authentication }}
  {{- with .Values.frank.security.http.ad }}
  application.security.http.authenticators: AdAuthenticator
  application.security.http.authenticators.AdAuthenticator.type: AD
  application.security.http.authenticators.AdAuthenticator.baseDn: {{ .baseDn }}
  application.security.http.authenticators.AdAuthenticator.url: {{ .url }}
  servlet.IAF-API.authenticator: AdAuthenticator
  {{- end }}
  {{- end }}
  {{- if .Values.frank.credentials.secret }}
{{/*  credentialFactory.class: nl.nn.credentialprovider.FileSystemCredentialFactory*/}}
  credentialFactory.class: nl.nn.credentialprovider.PropertyFileCredentialFactory
  credentialFactory.map.properties: /opt/frank/secrets/{{.Values.frank.credentials.key}}
  {{- end }}
  {{- if .Values.frank.properties }}
  {{ .Values.frank.properties | toYaml | nindent 2 }}
  {{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "zaakbrug.fullname" . }}-specifics
  labels:
    {{- include "zaakbrug.labels" . | nindent 4 }}
data:
  {{- with .Values.zaakbrug.soap }}
  {{- with .beantwoordVraag }}
  zaakbrug.soap.beantwoord-vraag.endpoint: {{ .endpoint }}
  zaakbrug.soap.beantwoord-vraag.validation-soft-fail: "{{ .validationSoftFail }}"
  {{- end }}
  {{- with .ontvangAsynchroon }}
  zaakbrug.soap.ontvang-asynchroon.endpoint: {{ .endpoint }}
  zaakbrug.soap.ontvang-asynchroon.validation-soft-fail: "{{ .validationSoftFail }}"
  {{- end }}
  {{- with .ontvangAsynchroonMutatie_v2 }}
  zaakbrug.soap.ontvang-asynchroon-mutatie.v2.endpoint: {{ .endpoint }}
  zaakbrug.soap.ontvang-asynchroon-mutatie.v2.validation-soft-fail: "{{ .validationSoftFail }}"
  {{- end }}
  {{- with .ontvangAsynchroonOverdragen_v2 }}
  zaakbrug.soap.ontvang-asynchroon-overdragen.v2.endpoint: {{ .endpoint }}
  zaakbrug.soap.ontvang-asynchroon-overdragen.v2.validation-soft-fail: "{{ .validationSoftFail }}"
  {{- end }}
  {{- with .vrijeBerichten }}
  zaakbrug.soap.vrije-berichten.endpoint: {{ .endpoint }}
  zaakbrug.soap.vrije-berichten.validation-soft-fail: "{{ .validationSoftFail }}"
  {{- end }}
  {{- with .vrijeBerichten_v2 }}
  zaakbrug.soap.vrije-berichten.v2.endpoint: {{ .endpoint }}
  zaakbrug.soap.vrije-berichten.v2.validation-soft-fail: "{{ .validationSoftFail }}"
  {{- end }}
  {{- end }}
  {{- with .Values.zaakbrug.zgw }}
  zaakbrug.zgw.zaak-identificatie-template: {{ .zaakIdentificatieTemplate }}
  zaakbrug.zgw.document-identificatie-template: {{ .documentIdentificatieTemplate }}
  zaakbrug.zgw.besluit-identificatie-template: {{ .besluitIdentificatieTemplate }}
  {{- with .zakenApi }}
  zaakbrug.zgw.zaken-api.root-url: {{ .rootUrl }}
  zaakbrug.zgw.zaken-api.timeout: {{ toString (.timeout | default 20000 | quote) }}
  zaakbrug.zgw.zaken-api.auth-type: {{ .authType }}
  zaakbrug.zgw.zaken-api.auth-alias: {{ .authAlias }}
  {{- end }}
  {{- with .documentenApi }}r
  zaakbrug.zgw.documenten-api.root-url: {{ .rootUrl }}
  zaakbrug.zgw.documenten-api.timeout: {{ toString (.timeout | default 20000 | quote) }}
  zaakbrug.zgw.documenten-api.auth-type: {{ .authType }}
  zaakbrug.zgw.documenten-api.auth-alias: {{ .authAlias }}
  {{- end }}
  {{- with .catalogiApi }}
  zaakbrug.zgw.catalogi-api.root-url: {{ .rootUrl }}
  zaakbrug.zgw.catalogi-api.timeout: {{ toString (.timeout | default 20000 | quote) }}
  zaakbrug.zgw.catalogi-api.auth-type: {{ .authType }}
  zaakbrug.zgw.catalogi-api.auth-alias: {{ .authAlias }}
  {{- end }}
  {{- end }}
  {{- with .Values.staging }}
  zaakbrug.staging.zaken-api.root-url: {{ .zakenApi.rootUrl }}
  zaakbrug.staging.documenten-api.root-url: {{ .documentenApi.rootUrl }}
  zaakbrug.staging.catalogi-api.root-url: {{ .catalogiApi.rootUrl }}
  {{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "zaakbrug.fullname" . }}-config
  labels:
    {{- include "zaakbrug.labels" . | nindent 4 }}
data:
  context.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <Context>
        <JarScanner scanClassPath="false" scanAllFiles="false" scanAllDirectories="false"/>
      {{- with .Values.connections }}
        {{- range .jdbc }}
          {{- $name := .host | required (printf ".host is required for database of type %s" ( .type | default "unknown" )) -}}
          {{- $name := .type | required (printf ".type is required for database with host %s" ( .host | default "unknown" )) -}}
          {{- if eq .type "oracle"}}
        <Resource
                name="{{ .name | default (printf "jdbc/%s" $.Values.frank.instance.name) | lower }}"
                factory="org.apache.naming.factory.BeanFactory"
                type="oracle.jdbc.xa.client.OracleXADataSource"
                URL="jdbc:oracle:thin:@{{ .host }}:{{ .port | default 1521}}:{{ .database | default $.Values.frank.instance.name }}"
                user="{{ .username }}"
                password="{{ .password }}"
        />
          {{- end }}
          {{- if eq .type "mssql"}}
        <Resource
                name="{{ .name | default (printf "jdbc/%s" $.Values.frank.instance.name) | lower }}"
                auth="Container"
                factory="org.apache.naming.factory.BeanFactory"
                type="com.microsoft.sqlserver.jdbc.SQLServerXADataSource"
                URL="jdbc:sqlserver://{{ .host }}:{{ .port | default 1433}};database={{ .database | default $.Values.frank.instance.name }}"
                user="{{ .username }}"
                password="{{ .password }}"
                sendStringParametersAsUnicode="false"
                sendTimeAsDatetime="true"
                selectMethod="direct"
                responseBuffering="adaptive"
                packetSize="4096"
                loginTimeout="10"
                lockTimeout="2000"
                lastUpdateCount="false"
                encrypt="{{ .ssl | default false}}"
                disableStatementPooling="true"
                applicationName="{{ $.Values.frank.instance.name }}"
                applicationIntent="readwrite"
        />
          {{- end }}
          {{- if eq .type "mysql" }}
        <Resource
                name="{{ .name | default (printf "jdbc/%s" $.Values.frank.instance.name) | lower }}"
                factory="org.apache.naming.factory.BeanFactory"
                type="com.mysql.cj.jdbc.MysqlXADataSource"
                URL="jdbc:mysql://{{ .host }}:{{ .port | default 3306}}/{{ .database | default $.Values.frank.instance.name }}"
                user="{{ .username }}"
                password="{{ .password }}"
                sslMode="{{ ternary "ENABLED" "DISABLED" (.ssl | default false)}}"
                serverTimezone="{{ $.Values.timeZone }}"
                allowPublicKeyRetrieval="true"
                pinGlobalTxToPhysicalConnection="true"
                socketTimeout="5000"
        />
          {{- end }}
          {{- if eq .type "mariadb" }}
        <Resource
                name="{{ .name | default (printf "jdbc/%s" $.Values.frank.instance.name) | lower }}"
                factory="org.apache.naming.factory.BeanFactory"
                type="com.mysql.cj.jdbc.MysqlXADataSource"
                URL="jdbc:mysql://{{ .host }}:{{ .port | default 3306}}/{{ .database | default $.Values.frank.instance.name }}"
                user="{{ .username }}"
                password="{{ .password }}"
                sslMode="{{ ternary "ENABLED" "DISABLED" (.ssl | default false)}}"
                serverTimezone="{{ $.Values.timeZone }}"
                allowPublicKeyRetrieval="true"
                pinGlobalTxToPhysicalConnection="true"
                socketTimeout="5000"
        />
          {{- end }}
          {{- if eq .type "postgresql"}}
        <Resource
                name="{{ .name | default (printf "jdbc/%s" $.Values.frank.instance.name) | lower }}"
                factory="org.apache.naming.factory.BeanFactory"
                type="org.postgresql.xa.PGXADataSource"
                URL="jdbc:postgresql://{{ .host }}:{{ .port | default 5432}}/{{ .database | default $.Values.frank.instance.name }}"
                user="{{ .username }}"
                password="{{ .password }}"
                sslMode="{{ ternary "REQUIRE" "DISABLE" (.ssl | default false)}}"
        />
          {{- end }}
          {{- if eq .type "db2" }}
        <Resource
                name="{{ .name | default (printf "jdbc/%s" $.Values.frank.instance.name) | lower }}"
                auth="Container"
                factory="org.apache.naming.factory.BeanFactory"
                type="com.ibm.db2.jcc.DB2XADataSource"
                serverName="{{ .host }}"
                portNumber="{{ .port | default 50000 }}"
                databaseName="{{ .database | default $.Values.frank.instance.name }}"
                driverType="4"
                user="{{ .username }}"
                password="{{ .password }}"
        />
          {{- end }}
          {{- if eq .type "mongodb" }}
        <Resource
                name="{{ .name | default (printf "jdbc/%s" $.Values.frank.instance.name) | lower }}"
                type="com.mongodb.MongoClient"
                factory="com.mongodb.client.MongoClientFactory"
                connectionString="mongodb://{{ .username }}:{{ .password }}@{{ .host }}"
                auth="Container"
                singleton="true"
        />
          {{- end }}
        {{- end }}
        {{- range .jms }}
          {{- $name := .host | required (printf ".host is required for MQ of type %s" .type) -}}
          {{- if eq .type "activemq" }}
        <Resource
                name="{{ .name | default (printf "jms/%s" $.Values.frank.instance.name) | lower }}"
                factory="org.apache.naming.factory.BeanFactory"
                type="org.apache.activemq.ActiveMQXAConnectionFactory"
                brokerURL="tcp://{{ .host }}:{{ .port | default 61616 }}?jms.xaAckMode=1"
        />
          {{- end }}
          {{- if eq .type "artemis" }}
        <Resource
                name="{{ .name | default (printf "jms/%s" $.Values.frank.instance.name) | lower }}"
                factory="org.apache.naming.factory.BeanFactory"
                type="org.apache.activemq.artemis.jms.client.ActiveMQXAConnectionFactory"
                brokerURL="tcp://{{ .host }}:{{ .port | default 61616 }}"
        />
          {{- end }}
        {{- end }}
      {{- end }}
    </Context>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "zaakbrug.fullname" . }}-tomcat-users
  labels:
    {{- include "zaakbrug.labels" . | nindent 4 }}
data:
  tomcat-users.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <tomcat-users xmlns="http://tomcat.apache.org/xml"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://tomcat.apache.org/xml tomcat-users.xsd"
                  version="1.0">
      <role rolename="IbisTester"/>
      <role rolename="IbisDataAdmin"/>
      <role rolename="IbisAdmin"/>
      <role rolename="IbisWebService"/>
      {{- range .Values.frank.security.http.tomcatUsers }}
      <user username="{{ .username }}" password="{{ .password }}" roles="{{ .roles | default "IbisTester" }}"/>
      {{- end }}
    </tomcat-users>
---
{{- if .Values.frank.security.http.ad.roles }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "zaakbrug.fullname" . }}-roles
  labels:
    {{- include "zaakbrug.labels" . | nindent 4 }}
data:
  ldap-role-mapping.properties: |
    IbisTester={{ .Values.frank.security.http.ad.roles.tester }}
    IbisAdmin={{ .Values.frank.security.http.ad.roles.admin }}
    IbisDataAdmin={{ .Values.frank.security.http.ad.roles.dataAdmin }}
    IbisObserver={{ .Values.frank.security.http.ad.roles.observer }}
{{- end }}
---
{{- if .Values.zaakbrug.globals }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "zaakbrug.fullname" . }}-globals
  labels:
    {{- include "zaakbrug.labels" . | nindent 4 }}
data:
  Globals.json: {{ .Values.zaakbrug.globals | toJson | quote }}
{{- end }}
---
{{- if .Values.zaakbrug.profiles }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "zaakbrug.fullname" . }}-profiles
  labels:
    {{- include "zaakbrug.labels" . | nindent 4 }}
data:
  Profiles.json: {{ .Values.zaakbrug.profiles | toJson | quote }}
{{- end }}
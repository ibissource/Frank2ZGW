replicaCount: 1

image:
  repository: wearefrank/zaakbrug
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

livenessProbe:
  initialDelaySeconds: 40
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 6
  successThreshold: 1

readinessProbe:
  initialDelaySeconds: 40
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 6
  successThreshold: 1

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

timeZone: Etc/UTC

zaakbrug:
  soap:
    beantwoordVraag:
      endpoint: "translate/generic/zds/BeantwoordVraag"
      validationSoftFail: false
    ontvangAsynchroon:
      endpoint: "translate/generic/zds/OntvangAsynchroon"
      validationSoftFail: false
    vrijeBerichten:
      endpoint: "translate/generic/zds/VrijBericht"
      validationSoftFail: false
  zgw:
    # Templates used for generating zaak- and documentidentificatie
    # The syntax for variable substitution is as follows {[variable-name][:formatting-string]} 
    # variables:
    # - id          Auto-incrementing identifier with 'D' as formatting option, indicating the amount of digits.
    #               example: {id:D5} with id-123 will result in '00123'
    # - datetime    The current date and time with '[Y' as formatting option, according to 
    #               (https://www.oreilly.com/library/view/xslt-2nd-edition/9780596527211/ch04s05.html).
    #               Only the '[Y0001]' is currently implemented
    #               example: {datetime:[Y001]} with datetime=14-03-2023 produces '2023'
    zaakIdentificatieTemplate: ZK{datetime:[Y0001]}-{id:D5}
    documentIdentificatieTemplate: DC{datetime:[Y0001]}-{id:D5}
    zakenApi:
      rootUrl: "http://open-zaak/zaken/api/v1/"
      authType: jwt # Options: 'jwt', 'basic', 'value'. 'value' uses the password field of the given authAlias as Authorization header
      authAlias: zaken-api.jwt # reference to an auth alias configured in credentials.properties
    catalogiApi:
      rootUrl: "http://open-zaak/catalogi/api/v1/"
      authType: jwt
      authAlias: zaken-api.jwt
    documentenApi:
      rootUrl: "http://open-zaak/documenten/api/v1/"
      authType: jwt
      authAlias: zaken-api.jwt

  globals:
    organizations:
      - gemeenteNaam: "Utrecht"
        gemeenteCode: "0344"
        RSIN: "002220647"
    rolMapping:
      heeftBetrekkingOp: "BetrekkingOp"
      heeftAlsBelanghebbende: "Belanghebbende"
      heeftAlsInitiator: "Initiator"
      heeftAlsUitvoerende: "Uitvoerende"
      heeftAlsVerantwoordelijke: "Verantwoordelijke"
      heeftAlsGemachtigde: "Gemachtigde"
      heeftAlsOverigBetrokkene: "OverigeBetrokkene"
  profiles:
    profile:
      - zaakTypeIdentificatie: "B9999"
        endCaseEndDate:
          coalesceResultaat: "Onbekend"
        endDateAndResultLastStatus:
          coalesceResultaat: "Onbekend"
      - zaakTypeIdentificatie: "B1026"
        endCaseEndDate:
          coalesceResultaat: "Toegekend"

frank:
  security:
    http:
      authentication: false
      enforceHttps: false
      # Local Tomcat users, for testing purposes only
      tomcatUsers: {}
#        - username: tomcat
#          password: changeMe
#          # Options: IbisTester (default), IbisDataAdmin, IbisAdmin, IbisWebService
#          roles: "IbisTester"
      # Only supports active directory for now
      ad: {}
#        # LDAP url e.g.: ldap://172.0.0.1
#        url:
#        # Base DN e.g.: DC=example,DC=com
#        baseDn:
#        # Roles to map to AD roles. e.g. dataAdmin: CN=FunctionalAdministrator,CN=Users,DC=example,DC=com
#        roles:
#          observer:
#          dataAdmin:
#          admin:
#          tester:
  # Secret containing the contents of the credentials.properties
  credentials:
    # Secret name in the cluster
    secret:
    # Key of secret and place to mount
    key:
#  # (TODO) Secrets should contain username and password keys, or just one of the two
#  secrets:
#      # Name of the secret in the namespace
#    - name:
#      # Alias for properties, for example: "database" can be used as ${database/username}
#      alias:
  # (required) the name of the Frank
  instance:
    name: "ZaakBrug"
  dtap:
    # (required) Options: LOC, DEV, TST, ACC, PRD
    stage:
    side: ""
  # Configurations to load.
  configurations:
    names: "Translate"
  properties: {}

connections:
  jdbc:
      # Default name is "jdbc/{{ .Values.frank.instance.name }}"
    - name: ""
      # (required) Possible types: oracle, mssql, mysql, mariadb, postgresql, db2 and mongodb
      type:
      # (required) Example: <service>.<namespace>.svc.cluster.local
      host:
      ssl: ""
      port: ""
      # Default database is .frank.instance.name
      database: ""
      username: #${database/username}
      password: #${database/password}